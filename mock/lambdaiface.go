// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/aws-sdk-go/service/lambda/lambdaiface (interfaces: LambdaAPI)

package mock_lambdaiface

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	lambda "github.com/aws/aws-sdk-go/service/lambda"
	gomock "github.com/golang/mock/gomock"
)

// Mock of LambdaAPI interface
type MockLambdaAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockLambdaAPIRecorder
}

// Recorder for MockLambdaAPI (not exported)
type _MockLambdaAPIRecorder struct {
	mock *MockLambdaAPI
}

func NewMockLambdaAPI(ctrl *gomock.Controller) *MockLambdaAPI {
	mock := &MockLambdaAPI{ctrl: ctrl}
	mock.recorder = &_MockLambdaAPIRecorder{mock}
	return mock
}

func (_m *MockLambdaAPI) EXPECT() *_MockLambdaAPIRecorder {
	return _m.recorder
}

func (_m *MockLambdaAPI) AddPermission(_param0 *lambda.AddPermissionInput) (*lambda.AddPermissionOutput, error) {
	ret := _m.ctrl.Call(_m, "AddPermission", _param0)
	ret0, _ := ret[0].(*lambda.AddPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) AddPermission(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddPermission", arg0)
}

func (_m *MockLambdaAPI) AddPermissionRequest(_param0 *lambda.AddPermissionInput) (*request.Request, *lambda.AddPermissionOutput) {
	ret := _m.ctrl.Call(_m, "AddPermissionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.AddPermissionOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) AddPermissionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddPermissionRequest", arg0)
}

func (_m *MockLambdaAPI) AddPermissionWithContext(_param0 aws.Context, _param1 *lambda.AddPermissionInput, _param2 ...request.Option) (*lambda.AddPermissionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AddPermissionWithContext", _s...)
	ret0, _ := ret[0].(*lambda.AddPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) AddPermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddPermissionWithContext", _s...)
}

func (_m *MockLambdaAPI) CreateAlias(_param0 *lambda.CreateAliasInput) (*lambda.AliasConfiguration, error) {
	ret := _m.ctrl.Call(_m, "CreateAlias", _param0)
	ret0, _ := ret[0].(*lambda.AliasConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) CreateAlias(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAlias", arg0)
}

func (_m *MockLambdaAPI) CreateAliasRequest(_param0 *lambda.CreateAliasInput) (*request.Request, *lambda.AliasConfiguration) {
	ret := _m.ctrl.Call(_m, "CreateAliasRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.AliasConfiguration)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) CreateAliasRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAliasRequest", arg0)
}

func (_m *MockLambdaAPI) CreateAliasWithContext(_param0 aws.Context, _param1 *lambda.CreateAliasInput, _param2 ...request.Option) (*lambda.AliasConfiguration, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateAliasWithContext", _s...)
	ret0, _ := ret[0].(*lambda.AliasConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) CreateAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAliasWithContext", _s...)
}

func (_m *MockLambdaAPI) CreateEventSourceMapping(_param0 *lambda.CreateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := _m.ctrl.Call(_m, "CreateEventSourceMapping", _param0)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) CreateEventSourceMapping(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateEventSourceMapping", arg0)
}

func (_m *MockLambdaAPI) CreateEventSourceMappingRequest(_param0 *lambda.CreateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := _m.ctrl.Call(_m, "CreateEventSourceMappingRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.EventSourceMappingConfiguration)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) CreateEventSourceMappingRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateEventSourceMappingRequest", arg0)
}

func (_m *MockLambdaAPI) CreateEventSourceMappingWithContext(_param0 aws.Context, _param1 *lambda.CreateEventSourceMappingInput, _param2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateEventSourceMappingWithContext", _s...)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) CreateEventSourceMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateEventSourceMappingWithContext", _s...)
}

func (_m *MockLambdaAPI) CreateFunction(_param0 *lambda.CreateFunctionInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.ctrl.Call(_m, "CreateFunction", _param0)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) CreateFunction(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateFunction", arg0)
}

func (_m *MockLambdaAPI) CreateFunctionRequest(_param0 *lambda.CreateFunctionInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.ctrl.Call(_m, "CreateFunctionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.FunctionConfiguration)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) CreateFunctionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateFunctionRequest", arg0)
}

func (_m *MockLambdaAPI) CreateFunctionWithContext(_param0 aws.Context, _param1 *lambda.CreateFunctionInput, _param2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateFunctionWithContext", _s...)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) CreateFunctionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateFunctionWithContext", _s...)
}

func (_m *MockLambdaAPI) DeleteAlias(_param0 *lambda.DeleteAliasInput) (*lambda.DeleteAliasOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteAlias", _param0)
	ret0, _ := ret[0].(*lambda.DeleteAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) DeleteAlias(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAlias", arg0)
}

func (_m *MockLambdaAPI) DeleteAliasRequest(_param0 *lambda.DeleteAliasInput) (*request.Request, *lambda.DeleteAliasOutput) {
	ret := _m.ctrl.Call(_m, "DeleteAliasRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.DeleteAliasOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) DeleteAliasRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAliasRequest", arg0)
}

func (_m *MockLambdaAPI) DeleteAliasWithContext(_param0 aws.Context, _param1 *lambda.DeleteAliasInput, _param2 ...request.Option) (*lambda.DeleteAliasOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteAliasWithContext", _s...)
	ret0, _ := ret[0].(*lambda.DeleteAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) DeleteAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAliasWithContext", _s...)
}

func (_m *MockLambdaAPI) DeleteEventSourceMapping(_param0 *lambda.DeleteEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := _m.ctrl.Call(_m, "DeleteEventSourceMapping", _param0)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) DeleteEventSourceMapping(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteEventSourceMapping", arg0)
}

func (_m *MockLambdaAPI) DeleteEventSourceMappingRequest(_param0 *lambda.DeleteEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := _m.ctrl.Call(_m, "DeleteEventSourceMappingRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.EventSourceMappingConfiguration)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) DeleteEventSourceMappingRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteEventSourceMappingRequest", arg0)
}

func (_m *MockLambdaAPI) DeleteEventSourceMappingWithContext(_param0 aws.Context, _param1 *lambda.DeleteEventSourceMappingInput, _param2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteEventSourceMappingWithContext", _s...)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) DeleteEventSourceMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteEventSourceMappingWithContext", _s...)
}

func (_m *MockLambdaAPI) DeleteFunction(_param0 *lambda.DeleteFunctionInput) (*lambda.DeleteFunctionOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteFunction", _param0)
	ret0, _ := ret[0].(*lambda.DeleteFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) DeleteFunction(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteFunction", arg0)
}

func (_m *MockLambdaAPI) DeleteFunctionRequest(_param0 *lambda.DeleteFunctionInput) (*request.Request, *lambda.DeleteFunctionOutput) {
	ret := _m.ctrl.Call(_m, "DeleteFunctionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.DeleteFunctionOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) DeleteFunctionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteFunctionRequest", arg0)
}

func (_m *MockLambdaAPI) DeleteFunctionWithContext(_param0 aws.Context, _param1 *lambda.DeleteFunctionInput, _param2 ...request.Option) (*lambda.DeleteFunctionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteFunctionWithContext", _s...)
	ret0, _ := ret[0].(*lambda.DeleteFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) DeleteFunctionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteFunctionWithContext", _s...)
}

func (_m *MockLambdaAPI) GetAccountSettings(_param0 *lambda.GetAccountSettingsInput) (*lambda.GetAccountSettingsOutput, error) {
	ret := _m.ctrl.Call(_m, "GetAccountSettings", _param0)
	ret0, _ := ret[0].(*lambda.GetAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetAccountSettings(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccountSettings", arg0)
}

func (_m *MockLambdaAPI) GetAccountSettingsRequest(_param0 *lambda.GetAccountSettingsInput) (*request.Request, *lambda.GetAccountSettingsOutput) {
	ret := _m.ctrl.Call(_m, "GetAccountSettingsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.GetAccountSettingsOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetAccountSettingsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccountSettingsRequest", arg0)
}

func (_m *MockLambdaAPI) GetAccountSettingsWithContext(_param0 aws.Context, _param1 *lambda.GetAccountSettingsInput, _param2 ...request.Option) (*lambda.GetAccountSettingsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetAccountSettingsWithContext", _s...)
	ret0, _ := ret[0].(*lambda.GetAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetAccountSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccountSettingsWithContext", _s...)
}

func (_m *MockLambdaAPI) GetAlias(_param0 *lambda.GetAliasInput) (*lambda.AliasConfiguration, error) {
	ret := _m.ctrl.Call(_m, "GetAlias", _param0)
	ret0, _ := ret[0].(*lambda.AliasConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetAlias(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAlias", arg0)
}

func (_m *MockLambdaAPI) GetAliasRequest(_param0 *lambda.GetAliasInput) (*request.Request, *lambda.AliasConfiguration) {
	ret := _m.ctrl.Call(_m, "GetAliasRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.AliasConfiguration)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetAliasRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAliasRequest", arg0)
}

func (_m *MockLambdaAPI) GetAliasWithContext(_param0 aws.Context, _param1 *lambda.GetAliasInput, _param2 ...request.Option) (*lambda.AliasConfiguration, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetAliasWithContext", _s...)
	ret0, _ := ret[0].(*lambda.AliasConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAliasWithContext", _s...)
}

func (_m *MockLambdaAPI) GetEventSourceMapping(_param0 *lambda.GetEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := _m.ctrl.Call(_m, "GetEventSourceMapping", _param0)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetEventSourceMapping(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEventSourceMapping", arg0)
}

func (_m *MockLambdaAPI) GetEventSourceMappingRequest(_param0 *lambda.GetEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := _m.ctrl.Call(_m, "GetEventSourceMappingRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.EventSourceMappingConfiguration)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetEventSourceMappingRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEventSourceMappingRequest", arg0)
}

func (_m *MockLambdaAPI) GetEventSourceMappingWithContext(_param0 aws.Context, _param1 *lambda.GetEventSourceMappingInput, _param2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetEventSourceMappingWithContext", _s...)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetEventSourceMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEventSourceMappingWithContext", _s...)
}

func (_m *MockLambdaAPI) GetFunction(_param0 *lambda.GetFunctionInput) (*lambda.GetFunctionOutput, error) {
	ret := _m.ctrl.Call(_m, "GetFunction", _param0)
	ret0, _ := ret[0].(*lambda.GetFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetFunction(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFunction", arg0)
}

func (_m *MockLambdaAPI) GetFunctionConfiguration(_param0 *lambda.GetFunctionConfigurationInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.ctrl.Call(_m, "GetFunctionConfiguration", _param0)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetFunctionConfiguration(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFunctionConfiguration", arg0)
}

func (_m *MockLambdaAPI) GetFunctionConfigurationRequest(_param0 *lambda.GetFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.ctrl.Call(_m, "GetFunctionConfigurationRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.FunctionConfiguration)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetFunctionConfigurationRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFunctionConfigurationRequest", arg0)
}

func (_m *MockLambdaAPI) GetFunctionConfigurationWithContext(_param0 aws.Context, _param1 *lambda.GetFunctionConfigurationInput, _param2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetFunctionConfigurationWithContext", _s...)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetFunctionConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFunctionConfigurationWithContext", _s...)
}

func (_m *MockLambdaAPI) GetFunctionRequest(_param0 *lambda.GetFunctionInput) (*request.Request, *lambda.GetFunctionOutput) {
	ret := _m.ctrl.Call(_m, "GetFunctionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.GetFunctionOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetFunctionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFunctionRequest", arg0)
}

func (_m *MockLambdaAPI) GetFunctionWithContext(_param0 aws.Context, _param1 *lambda.GetFunctionInput, _param2 ...request.Option) (*lambda.GetFunctionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetFunctionWithContext", _s...)
	ret0, _ := ret[0].(*lambda.GetFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetFunctionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFunctionWithContext", _s...)
}

func (_m *MockLambdaAPI) GetPolicy(_param0 *lambda.GetPolicyInput) (*lambda.GetPolicyOutput, error) {
	ret := _m.ctrl.Call(_m, "GetPolicy", _param0)
	ret0, _ := ret[0].(*lambda.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetPolicy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPolicy", arg0)
}

func (_m *MockLambdaAPI) GetPolicyRequest(_param0 *lambda.GetPolicyInput) (*request.Request, *lambda.GetPolicyOutput) {
	ret := _m.ctrl.Call(_m, "GetPolicyRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.GetPolicyOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetPolicyRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPolicyRequest", arg0)
}

func (_m *MockLambdaAPI) GetPolicyWithContext(_param0 aws.Context, _param1 *lambda.GetPolicyInput, _param2 ...request.Option) (*lambda.GetPolicyOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetPolicyWithContext", _s...)
	ret0, _ := ret[0].(*lambda.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) GetPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPolicyWithContext", _s...)
}

func (_m *MockLambdaAPI) Invoke(_param0 *lambda.InvokeInput) (*lambda.InvokeOutput, error) {
	ret := _m.ctrl.Call(_m, "Invoke", _param0)
	ret0, _ := ret[0].(*lambda.InvokeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) Invoke(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Invoke", arg0)
}

func (_m *MockLambdaAPI) InvokeAsync(_param0 *lambda.InvokeAsyncInput) (*lambda.InvokeAsyncOutput, error) {
	ret := _m.ctrl.Call(_m, "InvokeAsync", _param0)
	ret0, _ := ret[0].(*lambda.InvokeAsyncOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) InvokeAsync(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InvokeAsync", arg0)
}

func (_m *MockLambdaAPI) InvokeAsyncRequest(_param0 *lambda.InvokeAsyncInput) (*request.Request, *lambda.InvokeAsyncOutput) {
	ret := _m.ctrl.Call(_m, "InvokeAsyncRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.InvokeAsyncOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) InvokeAsyncRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InvokeAsyncRequest", arg0)
}

func (_m *MockLambdaAPI) InvokeAsyncWithContext(_param0 aws.Context, _param1 *lambda.InvokeAsyncInput, _param2 ...request.Option) (*lambda.InvokeAsyncOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "InvokeAsyncWithContext", _s...)
	ret0, _ := ret[0].(*lambda.InvokeAsyncOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) InvokeAsyncWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InvokeAsyncWithContext", _s...)
}

func (_m *MockLambdaAPI) InvokeRequest(_param0 *lambda.InvokeInput) (*request.Request, *lambda.InvokeOutput) {
	ret := _m.ctrl.Call(_m, "InvokeRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.InvokeOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) InvokeRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InvokeRequest", arg0)
}

func (_m *MockLambdaAPI) InvokeWithContext(_param0 aws.Context, _param1 *lambda.InvokeInput, _param2 ...request.Option) (*lambda.InvokeOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "InvokeWithContext", _s...)
	ret0, _ := ret[0].(*lambda.InvokeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) InvokeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InvokeWithContext", _s...)
}

func (_m *MockLambdaAPI) ListAliases(_param0 *lambda.ListAliasesInput) (*lambda.ListAliasesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListAliases", _param0)
	ret0, _ := ret[0].(*lambda.ListAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListAliases(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAliases", arg0)
}

func (_m *MockLambdaAPI) ListAliasesRequest(_param0 *lambda.ListAliasesInput) (*request.Request, *lambda.ListAliasesOutput) {
	ret := _m.ctrl.Call(_m, "ListAliasesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.ListAliasesOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListAliasesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAliasesRequest", arg0)
}

func (_m *MockLambdaAPI) ListAliasesWithContext(_param0 aws.Context, _param1 *lambda.ListAliasesInput, _param2 ...request.Option) (*lambda.ListAliasesOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListAliasesWithContext", _s...)
	ret0, _ := ret[0].(*lambda.ListAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListAliasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAliasesWithContext", _s...)
}

func (_m *MockLambdaAPI) ListEventSourceMappings(_param0 *lambda.ListEventSourceMappingsInput) (*lambda.ListEventSourceMappingsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListEventSourceMappings", _param0)
	ret0, _ := ret[0].(*lambda.ListEventSourceMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListEventSourceMappings(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListEventSourceMappings", arg0)
}

func (_m *MockLambdaAPI) ListEventSourceMappingsPages(_param0 *lambda.ListEventSourceMappingsInput, _param1 func(*lambda.ListEventSourceMappingsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListEventSourceMappingsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLambdaAPIRecorder) ListEventSourceMappingsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListEventSourceMappingsPages", arg0, arg1)
}

func (_m *MockLambdaAPI) ListEventSourceMappingsPagesWithContext(_param0 aws.Context, _param1 *lambda.ListEventSourceMappingsInput, _param2 func(*lambda.ListEventSourceMappingsOutput, bool) bool, _param3 ...request.Option) error {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListEventSourceMappingsPagesWithContext", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLambdaAPIRecorder) ListEventSourceMappingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListEventSourceMappingsPagesWithContext", _s...)
}

func (_m *MockLambdaAPI) ListEventSourceMappingsRequest(_param0 *lambda.ListEventSourceMappingsInput) (*request.Request, *lambda.ListEventSourceMappingsOutput) {
	ret := _m.ctrl.Call(_m, "ListEventSourceMappingsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.ListEventSourceMappingsOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListEventSourceMappingsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListEventSourceMappingsRequest", arg0)
}

func (_m *MockLambdaAPI) ListEventSourceMappingsWithContext(_param0 aws.Context, _param1 *lambda.ListEventSourceMappingsInput, _param2 ...request.Option) (*lambda.ListEventSourceMappingsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListEventSourceMappingsWithContext", _s...)
	ret0, _ := ret[0].(*lambda.ListEventSourceMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListEventSourceMappingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListEventSourceMappingsWithContext", _s...)
}

func (_m *MockLambdaAPI) ListFunctions(_param0 *lambda.ListFunctionsInput) (*lambda.ListFunctionsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListFunctions", _param0)
	ret0, _ := ret[0].(*lambda.ListFunctionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListFunctions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListFunctions", arg0)
}

func (_m *MockLambdaAPI) ListFunctionsPages(_param0 *lambda.ListFunctionsInput, _param1 func(*lambda.ListFunctionsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListFunctionsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLambdaAPIRecorder) ListFunctionsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListFunctionsPages", arg0, arg1)
}

func (_m *MockLambdaAPI) ListFunctionsPagesWithContext(_param0 aws.Context, _param1 *lambda.ListFunctionsInput, _param2 func(*lambda.ListFunctionsOutput, bool) bool, _param3 ...request.Option) error {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListFunctionsPagesWithContext", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLambdaAPIRecorder) ListFunctionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListFunctionsPagesWithContext", _s...)
}

func (_m *MockLambdaAPI) ListFunctionsRequest(_param0 *lambda.ListFunctionsInput) (*request.Request, *lambda.ListFunctionsOutput) {
	ret := _m.ctrl.Call(_m, "ListFunctionsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.ListFunctionsOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListFunctionsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListFunctionsRequest", arg0)
}

func (_m *MockLambdaAPI) ListFunctionsWithContext(_param0 aws.Context, _param1 *lambda.ListFunctionsInput, _param2 ...request.Option) (*lambda.ListFunctionsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListFunctionsWithContext", _s...)
	ret0, _ := ret[0].(*lambda.ListFunctionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListFunctionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListFunctionsWithContext", _s...)
}

func (_m *MockLambdaAPI) ListTags(_param0 *lambda.ListTagsInput) (*lambda.ListTagsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListTags", _param0)
	ret0, _ := ret[0].(*lambda.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListTags(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTags", arg0)
}

func (_m *MockLambdaAPI) ListTagsRequest(_param0 *lambda.ListTagsInput) (*request.Request, *lambda.ListTagsOutput) {
	ret := _m.ctrl.Call(_m, "ListTagsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.ListTagsOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListTagsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTagsRequest", arg0)
}

func (_m *MockLambdaAPI) ListTagsWithContext(_param0 aws.Context, _param1 *lambda.ListTagsInput, _param2 ...request.Option) (*lambda.ListTagsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListTagsWithContext", _s...)
	ret0, _ := ret[0].(*lambda.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTagsWithContext", _s...)
}

func (_m *MockLambdaAPI) ListVersionsByFunction(_param0 *lambda.ListVersionsByFunctionInput) (*lambda.ListVersionsByFunctionOutput, error) {
	ret := _m.ctrl.Call(_m, "ListVersionsByFunction", _param0)
	ret0, _ := ret[0].(*lambda.ListVersionsByFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListVersionsByFunction(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListVersionsByFunction", arg0)
}

func (_m *MockLambdaAPI) ListVersionsByFunctionRequest(_param0 *lambda.ListVersionsByFunctionInput) (*request.Request, *lambda.ListVersionsByFunctionOutput) {
	ret := _m.ctrl.Call(_m, "ListVersionsByFunctionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.ListVersionsByFunctionOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListVersionsByFunctionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListVersionsByFunctionRequest", arg0)
}

func (_m *MockLambdaAPI) ListVersionsByFunctionWithContext(_param0 aws.Context, _param1 *lambda.ListVersionsByFunctionInput, _param2 ...request.Option) (*lambda.ListVersionsByFunctionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListVersionsByFunctionWithContext", _s...)
	ret0, _ := ret[0].(*lambda.ListVersionsByFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) ListVersionsByFunctionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListVersionsByFunctionWithContext", _s...)
}

func (_m *MockLambdaAPI) PublishVersion(_param0 *lambda.PublishVersionInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.ctrl.Call(_m, "PublishVersion", _param0)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) PublishVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PublishVersion", arg0)
}

func (_m *MockLambdaAPI) PublishVersionRequest(_param0 *lambda.PublishVersionInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.ctrl.Call(_m, "PublishVersionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.FunctionConfiguration)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) PublishVersionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PublishVersionRequest", arg0)
}

func (_m *MockLambdaAPI) PublishVersionWithContext(_param0 aws.Context, _param1 *lambda.PublishVersionInput, _param2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PublishVersionWithContext", _s...)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) PublishVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PublishVersionWithContext", _s...)
}

func (_m *MockLambdaAPI) RemovePermission(_param0 *lambda.RemovePermissionInput) (*lambda.RemovePermissionOutput, error) {
	ret := _m.ctrl.Call(_m, "RemovePermission", _param0)
	ret0, _ := ret[0].(*lambda.RemovePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) RemovePermission(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemovePermission", arg0)
}

func (_m *MockLambdaAPI) RemovePermissionRequest(_param0 *lambda.RemovePermissionInput) (*request.Request, *lambda.RemovePermissionOutput) {
	ret := _m.ctrl.Call(_m, "RemovePermissionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.RemovePermissionOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) RemovePermissionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemovePermissionRequest", arg0)
}

func (_m *MockLambdaAPI) RemovePermissionWithContext(_param0 aws.Context, _param1 *lambda.RemovePermissionInput, _param2 ...request.Option) (*lambda.RemovePermissionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RemovePermissionWithContext", _s...)
	ret0, _ := ret[0].(*lambda.RemovePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) RemovePermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemovePermissionWithContext", _s...)
}

func (_m *MockLambdaAPI) TagResource(_param0 *lambda.TagResourceInput) (*lambda.TagResourceOutput, error) {
	ret := _m.ctrl.Call(_m, "TagResource", _param0)
	ret0, _ := ret[0].(*lambda.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) TagResource(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TagResource", arg0)
}

func (_m *MockLambdaAPI) TagResourceRequest(_param0 *lambda.TagResourceInput) (*request.Request, *lambda.TagResourceOutput) {
	ret := _m.ctrl.Call(_m, "TagResourceRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.TagResourceOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TagResourceRequest", arg0)
}

func (_m *MockLambdaAPI) TagResourceWithContext(_param0 aws.Context, _param1 *lambda.TagResourceInput, _param2 ...request.Option) (*lambda.TagResourceOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TagResourceWithContext", _s...)
	ret0, _ := ret[0].(*lambda.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TagResourceWithContext", _s...)
}

func (_m *MockLambdaAPI) UntagResource(_param0 *lambda.UntagResourceInput) (*lambda.UntagResourceOutput, error) {
	ret := _m.ctrl.Call(_m, "UntagResource", _param0)
	ret0, _ := ret[0].(*lambda.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UntagResource", arg0)
}

func (_m *MockLambdaAPI) UntagResourceRequest(_param0 *lambda.UntagResourceInput) (*request.Request, *lambda.UntagResourceOutput) {
	ret := _m.ctrl.Call(_m, "UntagResourceRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.UntagResourceOutput)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UntagResourceRequest", arg0)
}

func (_m *MockLambdaAPI) UntagResourceWithContext(_param0 aws.Context, _param1 *lambda.UntagResourceInput, _param2 ...request.Option) (*lambda.UntagResourceOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UntagResourceWithContext", _s...)
	ret0, _ := ret[0].(*lambda.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UntagResourceWithContext", _s...)
}

func (_m *MockLambdaAPI) UpdateAlias(_param0 *lambda.UpdateAliasInput) (*lambda.AliasConfiguration, error) {
	ret := _m.ctrl.Call(_m, "UpdateAlias", _param0)
	ret0, _ := ret[0].(*lambda.AliasConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UpdateAlias(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAlias", arg0)
}

func (_m *MockLambdaAPI) UpdateAliasRequest(_param0 *lambda.UpdateAliasInput) (*request.Request, *lambda.AliasConfiguration) {
	ret := _m.ctrl.Call(_m, "UpdateAliasRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.AliasConfiguration)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UpdateAliasRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAliasRequest", arg0)
}

func (_m *MockLambdaAPI) UpdateAliasWithContext(_param0 aws.Context, _param1 *lambda.UpdateAliasInput, _param2 ...request.Option) (*lambda.AliasConfiguration, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateAliasWithContext", _s...)
	ret0, _ := ret[0].(*lambda.AliasConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UpdateAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAliasWithContext", _s...)
}

func (_m *MockLambdaAPI) UpdateEventSourceMapping(_param0 *lambda.UpdateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := _m.ctrl.Call(_m, "UpdateEventSourceMapping", _param0)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UpdateEventSourceMapping(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateEventSourceMapping", arg0)
}

func (_m *MockLambdaAPI) UpdateEventSourceMappingRequest(_param0 *lambda.UpdateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := _m.ctrl.Call(_m, "UpdateEventSourceMappingRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.EventSourceMappingConfiguration)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UpdateEventSourceMappingRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateEventSourceMappingRequest", arg0)
}

func (_m *MockLambdaAPI) UpdateEventSourceMappingWithContext(_param0 aws.Context, _param1 *lambda.UpdateEventSourceMappingInput, _param2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateEventSourceMappingWithContext", _s...)
	ret0, _ := ret[0].(*lambda.EventSourceMappingConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UpdateEventSourceMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateEventSourceMappingWithContext", _s...)
}

func (_m *MockLambdaAPI) UpdateFunctionCode(_param0 *lambda.UpdateFunctionCodeInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.ctrl.Call(_m, "UpdateFunctionCode", _param0)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UpdateFunctionCode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateFunctionCode", arg0)
}

func (_m *MockLambdaAPI) UpdateFunctionCodeRequest(_param0 *lambda.UpdateFunctionCodeInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.ctrl.Call(_m, "UpdateFunctionCodeRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.FunctionConfiguration)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UpdateFunctionCodeRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateFunctionCodeRequest", arg0)
}

func (_m *MockLambdaAPI) UpdateFunctionCodeWithContext(_param0 aws.Context, _param1 *lambda.UpdateFunctionCodeInput, _param2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateFunctionCodeWithContext", _s...)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UpdateFunctionCodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateFunctionCodeWithContext", _s...)
}

func (_m *MockLambdaAPI) UpdateFunctionConfiguration(_param0 *lambda.UpdateFunctionConfigurationInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.ctrl.Call(_m, "UpdateFunctionConfiguration", _param0)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UpdateFunctionConfiguration(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateFunctionConfiguration", arg0)
}

func (_m *MockLambdaAPI) UpdateFunctionConfigurationRequest(_param0 *lambda.UpdateFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.ctrl.Call(_m, "UpdateFunctionConfigurationRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lambda.FunctionConfiguration)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UpdateFunctionConfigurationRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateFunctionConfigurationRequest", arg0)
}

func (_m *MockLambdaAPI) UpdateFunctionConfigurationWithContext(_param0 aws.Context, _param1 *lambda.UpdateFunctionConfigurationInput, _param2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateFunctionConfigurationWithContext", _s...)
	ret0, _ := ret[0].(*lambda.FunctionConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLambdaAPIRecorder) UpdateFunctionConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateFunctionConfigurationWithContext", _s...)
}
